from pathlib import Path

configfile: "config.yaml"
outdir = Path(config["outdir"])

SAMPLE_DATA = dict()
path = config["data"]["path"]
PAIRED_SAMPLES = dict()
for sn, data in config["data"]["samples"].items():
    R1, R2 = data.get("R1"), data.get("R2", None)
    if R1[0] != "/":
        data["R1"] = os.path.join(path, data["R1"])
    if "R2" in data and data["R2"][0] != "/":
        data["R2"] = os.path.join(path, data["R2"])
    SAMPLE_DATA[sn] = data
    if "input" in data and data["input"] is not None:
        PAIRED_SAMPLES[sn] = data["input"]

rule all:
    input:
        expand(outdir / "reads_raw/{sample}/{sample}_R1.fastq.gz", sample=SAMPLE_DATA.keys()),
        expand(outdir / "reads_raw/{sample}/{sample}_R2.fastq.gz", sample=[sn for sn, data in SAMPLE_DATA.items() if "R2" in data]),
        expand(outdir / "reads_clean/{sample}/{sample}_R1.trimmed.fastq.gz", sample=SAMPLE_DATA.keys()),
        expand(outdir / "reads_clean/{sample}/{sample}_R2.trimmed.fastq.gz", sample=[sn for sn, data in SAMPLE_DATA.items() if "R2" in data]),  
        expand(outdir / "reads_clean/{sample}/{sample}_R1.trimmed.rm_rRNA.fastq.gz", sample=SAMPLE_DATA.keys()),
        expand(outdir / "reads_clean/{sample}/{sample}_R2.trimmed.rm_rRNA.fastq.gz", sample=[sn for sn, data in SAMPLE_DATA.items() if "R2" in data]),
        expand(outdir / "alignments_star/{sample}/{sample}.Aligned.sortedByCoord.out.bam", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.Aligned.sortedByCoord.out.bam.bai", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.bam", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.bam.bai", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.fwd.bam", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.fwd.bam.bai", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.rev.bam", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.rev.bam.bai", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.fwd.BPM.bw", sample=SAMPLE_DATA.keys()),
        expand(outdir / "alignments_star/{sample}/{sample}.dedup.rev.BPM.bw", sample=SAMPLE_DATA.keys()),
        expand(
            outdir / "macs3_peaks/{sample}_peaks.narrowPeak",
            sample=PAIRED_SAMPLES.keys()
        )


## 
ruleorder: link_fastq_pe > link_fastq_se

rule link_fastq_pe:
    input:
        r1 = lambda wildcards: SAMPLE_DATA[wildcards.sample]["R1"],
        r2 = lambda wildcards: SAMPLE_DATA[wildcards.sample]["R2"]
    output:
        r1 = outdir / "reads_raw/{sample}/{sample}_R1.fastq.gz",
        r2 = outdir / "reads_raw/{sample}/{sample}_R2.fastq.gz"
    threads:
        1
    resources:
        mem_mb = 512
    shell:
        "ln -s {input.R1} {output.R1} && ln -s {input.R2} {output.R2}"

rule link_fastq_se:
    input:
        r1 = lambda wildcards: SAMPLE_DATA[wildcards.sample]["R1"]
    output:
        r1 = outdir / "reads_raw/{sample}/{sample}_R1.fastq.gz"
    threads:
        1
    resources:
        mem_mb = 512
    shell:
        "ln -s {input.R1} {output.R1}"

## cutadapt
ruleorder: cutadapt_pe > cutadapt_se
rule cutadapt_se:
    wildcard_constraints:
        sample = "|".join([sn for sn, data in SAMPLE_DATA.items() if "R2" not in data])
    input:
        r1 = outdir / "reads_raw/{sample}/{sample}_R1.fastq.gz"
    output:
        r1_tmp = temp(outdir / "reads_clean/{sample}/{sample}_R1.trimmed.fastq.tmp.gz"),
        r1 = outdir / "reads_clean/{sample}/{sample}_R1.trimmed.fastq.gz",
    log:
        outdir / "reads_clean/{sample}/{sample}.cutadapt.log"
    threads:
        8
    resources:
        mem_mb = 1024 * 8
    shell:
        """
        cutadapt \
            -j {threads} \
            --nextseq-trim=20 \
            --action=trim \
            -a AGATCGGAAGAGCACACGTCTGAACTCCAG \
            -o {output.r1_tmp} {input} &> {log}
        cutadapt \
            -j {threads} \
            -q 20 -m 20 --action=trim \
            -u 8 -u -4 \
            --rename='{{id}}_{{cut_prefix}} {{comment}}' \
            -o {output.r1} {output.r1_tmp} &>> {log}
        """

rule cutadapt_pe:
    wildcard_constraints:
        sample = "|".join([sn for sn, data in SAMPLE_DATA.items() if "R2" in data])
    input:
        r1 = outdir / "reads_raw/{sample}/{sample}_R1.fastq.gz",
        r2 = outdir / "reads_raw/{sample}/{sample}_R2.fastq.gz"
    output:
        r1_tmp = temp(outdir / "reads_clean/{sample}/{sample}_R1.trimmed.fastq.tmp.gz"),
        r1 = outdir / "reads_clean/{sample}/{sample}_R1.trimmed.fastq.gz",
        r2_tmp = temp(outdir / "reads_clean/{sample}/{sample}_R2.trimmed.fastq.tmp.gz"),
        r2 = outdir / "reads_clean/{sample}/{sample}_R2.trimmed.fastq.gz"
    threads:
        8
    resources:
        mem_mb = 1024 * 8
    log:
        outdir / "reads_clean/{sample}/{sample}.cutadapt.log"
    shell:
        """
        cutadapt \
            -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA \
            -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT \
            -j {threads} \
            --nextseq-trim=20 \
            -o {output.r1_tmp} -p {output.r2_tmp} \
            {input.r1} {input.r2} &> {log} && \
        cutadapt \
            -j {threads} \
            -q 20 -m 20 --action=trim \
            -u 8 -u -4 \
            -U 4 -U -8 \
            --rename='{{id}}_{{r1.cut_prefix}} {{comment}}' \
            -o {output.r1} -p {output.r2} \
            {output.r1_tmp} {output.r2_tmp} &>> {log}
        """

## 
if "rRNA_index" not in config:
    assert "rRNA_fasta" in config, "rRNA_index or rRNA_fasta must be defined in the config file"
    bn = os.path.basename(config["rRNA_fasta"])
    # trim the extension
    bn = os.path.splitext(bn)[0]
    rule bowtie2_index:
        input:
            fasta = config["rRNA_fasta"]
        output:
            outdir / f"reference/bowtie2_rRNA/{bn}.1.bt2",
        params:
            prefix = outdir / f"reference/bowtie2_rRNA/{bn}"
        log:
            outdir / f"reference/bowtie2_rRNA/{bn}.index.log"
        threads:
            16
        resources:
            mem_mb = 1024 * 8
        shell:
            """
            bowtie2-build \
                --threads {threads} \
                {input.fasta} {params.prefix} &> {log}
            """
    config["rRNA_index"] = outdir / f"reference/bowtie2_rRNA/{bn}"

ruleorder: bowtie_to_rRNA_pe > bowtie_to_rRNA_se
rule bowtie_to_rRNA_pe:
    wildcard_constraints:
        sample = "|".join([sn for sn, data in SAMPLE_DATA.items() if "R2" in data])
    input:
        r1 = outdir / "reads_clean/{sample}/{sample}_R1.trimmed.fastq.gz",
        r2 = outdir / "reads_clean/{sample}/{sample}_R2.trimmed.fastq.gz",
        index_1 = str(config["rRNA_index"]) + ".1.bt2",
    output:
        r1 = outdir / "reads_clean/{sample}/{sample}_R1.trimmed.rm_rRNA.fastq.gz",
        r2 = outdir / "reads_clean/{sample}/{sample}_R2.trimmed.rm_rRNA.fastq.gz",
    log:
        outdir / "reads_clean/{sample}/{sample}_R1.trimmed.rm_rRNA.log"
    threads:
        8
    params:
        index = config["rRNA_index"]
    shell:
        """
            bowtie2 \
                -p {threads} \
                -x {params.index} \
                -1 {input.r1} \
                -2 {input.r2} \
                --un-conc-gz {outdir}/reads_clean/{wildcards.sample}/{wildcards.sample}.trimmed.rm_rRNA.gz \
                -S /dev/null \
                2> {log} && \
            mv {outdir}/reads_clean/{wildcards.sample}/{wildcards.sample}.trimmed.rm_rRNA.1.gz {output.r1} && \
            mv {outdir}/reads_clean/{wildcards.sample}/{wildcards.sample}.trimmed.rm_rRNA.2.gz {output.r2}
        """


rule bowtie_to_rRNA_se:
    wildcard_constraints:
        sample = "|".join([sn for sn, data in SAMPLE_DATA.items() if "R2" not in data])
    input:
        r1 = outdir / "reads_clean/{sample}/{sample}_R1.trimmed.fastq.gz",
        index_1 = str(config["rRNA_index"]) + ".1.bt2",
    output:
        outdir / "reads_clean/{sample}/{sample}_R1.trimmed.rm_rRNA.fastq.gz"
    log:
        outdir / "reads_clean/{sample}/{sample}_R1.trimmed.rm_rRNA.log"
    params:
        bt2idx = config["rRNA_index"]
    threads:
        16
    shell:
        """
        	bowtie2 \
                --threads {threads} \
                --seedlen=15 \
                -x {params.bt2idx} \
		    -U {input.r1} --un-gz {output} 2> {log} > /dev/null
        """

rule star_to_genome:
    input:
        #outdir / "reads_clean/{sample}/{sample}_{read}.trimmed.rm_rRNA.fastq.gz",
        lambda wildcards: [
            outdir / f"reads_clean/{wildcards.sample}/{wildcards.sample}_{read}.trimmed.rm_rRNA.fastq.gz"
            for read in (["R1", "R2"] if "R2" in SAMPLE_DATA[wildcards.sample] else ["R1"])
        ]
    output:
        outdir / "alignments_star/{sample}/{sample}.Aligned.sortedByCoord.out.bam",
        outdir / "alignments_star/{sample}/{sample}.Aligned.sortedByCoord.out.bam.bai"
    log:
        outdir / "alignments_star/{sample}/{sample}.log"
    params:
        star_index = config["star_index"],
        prefix = lambda wildcards: outdir / f"alignments_star/{wildcards.sample}/{wildcards.sample}.",
    threads:
        16
    resources:
        mem_mb = 1024 * 48
    shell:
        """
        STAR \
            --runMode alignReads \
            --alignEndsType EndToEnd \
            --genomeLoad NoSharedMemory \
            --quantMode TranscriptomeSAM \
            --alignMatesGapMax 15000 \
            --outFilterMultimapNmax 1 \
            --outSAMattributes All \
            --outSAMtype BAM SortedByCoordinate \
            --outFilterType BySJout \
            --outReadsUnmapped Fastx \
            --outFilterScoreMin 10 \
            --outFilterMatchNmin 24 \
            --runThreadN {threads} \
            --readFilesCommand zcat \
            --genomeDir {params.star_index} \
            --outFileNamePrefix {params.prefix} \
            --readFilesIn {input} \
            &> {log} && \
            samtools index -@ {threads} {output[0]}
        """


rule unitools_dedup:
    input:
        outdir / "alignments_star/{sample}/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        outdir / "alignments_star/{sample}/{sample}.dedup.bam",
        outdir / "alignments_star/{sample}/{sample}.dedup.bam.bai"
    log:
        log = outdir / "alignments_star/{sample}/{sample}.dedup.log",
        stats = outdir / "alignments_star/{sample}/{sample}.dedup.stats"
    params:
        umi = config.get("UMITOOLS", "umi_tools")
    threads:
        1
    shell:
        """
        {params.umi} dedup --method unique \
            -I {input} \
            --output-stats={log.stats} \
            -L {log.log} \
            -S {output[0]} && \
        samtools index -@ {threads} {output[0]}
        """

rule split_strand:
    input:
        outdir / "alignments_star/{sample}/{sample}.dedup.bam"
    output:
        fwd = outdir / "alignments_star/{sample}/{sample}.dedup.fwd.bam",
        fwd_bai = outdir / "alignments_star/{sample}/{sample}.dedup.fwd.bam.bai",
        rev = outdir / "alignments_star/{sample}/{sample}.dedup.rev.bam",
        rev_bai = outdir / "alignments_star/{sample}/{sample}.dedup.rev.bam.bai"
    params:
        strandness = lambda wildcards: SAMPLE_DATA[wildcards.sample].get("strandness") # F/R/FR/RF
    log:
        outdir / "alignments_star/{sample}/{sample}.dedup.split_strand.log"
    threads:
        8
    shell:
        """
        python ./split_bam_by_strand.py \
            -l {params.strandness} \
            -t {threads} \
            {input} -o {outdir}/alignments_star/{wildcards.sample}/{wildcards.sample}.dedup
        """

for norm in ["CPM", "RPKM", "BPM"]:
    rule:
        name: f"bamCoverage_{norm}"
        input:
            fwd = outdir / "alignments_star/{sample}/{sample}.dedup.fwd.bam",
            rev = outdir / "alignments_star/{sample}/{sample}.dedup.rev.bam"
        output:
            fwd = outdir / f"alignments_star/{{sample}}/{{sample}}.dedup.fwd.{norm}.bw",
            rev = outdir / f"alignments_star/{{sample}}/{{sample}}.dedup.rev.{norm}.bw"
        params:
            norm = norm,
            binsize = 10
        log:
            fwd = outdir / f"alignments_star/{{sample}}/{{sample}}.dedup.fwd.{norm}.log",
            rev = outdir / f"alignments_star/{{sample}}/{{sample}}.dedup.rev.{norm}.log"
        params:
            binsize = 1
        threads:
            8
        shell:
            """
            bamCoverage -b {input.fwd} -o {output[0]} --binSize {params.binsize} -p {threads} --normalizeUsing {params.norm} &> {log[0]} &&
            bamCoverage -b {input.rev} -o {output[1]} --binSize {params.binsize} -p {threads} --normalizeUsing {params.norm} &> {log[1]}
            """


rule macs3_peakcalling:
    wildcard_constraints:
        sample = "|".join(PAIRED_SAMPLES.keys())
    input:
        trt_fwd = outdir / "alignments_star/{sample}/{sample}.dedup.fwd.bam",
        trt_rev = outdir / "alignments_star/{sample}/{sample}.dedup.rev.bam",
        ctrl_fwd = lambda wildcards: expand(outdir / "alignments_star/{sample}/{sample}.dedup.fwd.bam", sample=PAIRED_SAMPLES[wildcards.sample]),
        ctrl_rev = lambda wildcards: expand(outdir / "alignments_star/{sample}/{sample}.dedup.rev.bam", sample=PAIRED_SAMPLES[wildcards.sample])
    output:
        outdir / "macs3_peaks/{sample}_peaks.narrowPeak"
    log:
        outdir / "macs3_peaks/{sample}.macs3.log"
    params:
        macs3 = config.get("MACS3", "macs3"),
        extsize = config.get("peak_calling", dict()).get("extsize", 30),
    threads:
        1
    shell:
        """
        macs3 callpeak \
            -t {input.trt_fwd} \
            -c {input.ctrl_fwd} \
            -B --keep-dup all \
            --nomodel \
            --extsize {params.extsize} \
            --outdir {outdir}/macs3_peaks \
            -n {wildcards.sample}_fwd &> {log} && \
        macs3 callpeak \
            -t {input.trt_rev} \
            -c {input.ctrl_rev} \
            -B --keep-dup all \
            --nomodel \
            --extsize {params.extsize} \
            --outdir {outdir}/macs3_peaks \
            -n {wildcards.sample}_rev &>> {log} && \
        awk -v OFS="\\t" '{{$6 = "+"; print $0}}' {outdir}/macs3_peaks/{wildcards.sample}_fwd_peaks.narrowPeak > {output}.tmp && \
        awk -v OFS="\\t" '{{$6 = "-"; print $0}}' {outdir}/macs3_peaks/{wildcards.sample}_rev_peaks.narrowPeak >> {output}.tmp && \
        sort -k1,1 -k2,2n -k3,3n {output}.tmp  > {output} && rm -f {output}.tmp && \
        rm -f {outdir}/macs3_peaks/{wildcards.sample}_fwd_peaks.narrowPeak {outdir}/macs3_peaks/{wildcards.sample}_rev_peaks.narrowPeak
        """

